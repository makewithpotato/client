import { type AxiosRequestConfig, type AxiosResponse } from 'axios';

// ÎîîÎ≤ÑÍπÖ Î™®Îìú ÏÉÅÌÉúÎ•º Ï†ÄÏû•ÌïòÎäî Î≥ÄÏàò
let isDebugMode = import.meta.env.DEV;

/**
 * ÎîîÎ≤ÑÍπÖ Î™®ÎìúÎ•º ÏÑ§Ï†ïÌï©ÎãàÎã§. Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî __DEV__ Î≥ÄÏàòÍ∞Ä trueÏù¥ÎØÄÎ°ú ÎîîÎ≤ÑÍπÖ Î™®ÎìúÍ∞Ä ÏºúÏßëÎãàÎã§.
 * Ïù¥Î•º ÌÜµÌï¥ ÎîîÎ≤ÑÍπÖ Î™®Îìú ÏºúÍ∏∞/ÎÅÑÍ∏∞ Í∞ÄÎä•
 * @author ÍπÄÎèôÌòÑ
 * ÏñµÏßÄÎ°ú ÎîîÎ≤ÑÍπÖ Î™®Îìú ÏºúÍ∏∞
 * setDebugMode(true);
 * ÏñµÏßÄÎ°ú ÎîîÎ≤ÑÍπÖ Î™®Îìú ÎÅÑÍ∏∞
 * setDebugMode(false);
 */
export const setDebugMode = (mode: boolean) => {
    isDebugMode = mode;
};

/**
 * ÌòÑÏû¨ ÎîîÎ≤ÑÍπÖ Î™®Îìú ÏÉÅÌÉúÎ•º Î∞òÌôòÌï©ÎãàÎã§.
 * @author ÍπÄÎèôÌòÑ
 */
export const getDebugMode = () => isDebugMode;

/**
 * ÎîîÎ≤ÑÍπÖ Î™®ÎìúÏùº ÎïåÎßå Î°úÍ∑∏Î•º Ï∂úÎ†•Ìï©ÎãàÎã§.
 * @param message Î°úÍ∑∏ Î©îÏãúÏßÄ
 * @param data Î°úÍ∑∏ Îç∞Ïù¥ÌÑ∞
 * @author ÍπÄÎèôÌòÑ
 */
export const debugLog = (message: string, data?: any) => {
    if (isDebugMode) {
        console.log(`üîç ${message}`, data || '');
    }
};

/**
 * Axios ÏöîÏ≤≠ÏùÑ Î°úÍπÖÌï©ÎãàÎã§.
 * @param config Axios ÏöîÏ≤≠ ÏÑ§Ï†ï
 * @author ÍπÄÎèôÌòÑ
 */
export const logRequest = (config: AxiosRequestConfig) => {
    if (!isDebugMode) return;

    const { method, url, data, headers } = config;
    debugLog('üöÄ Request', {
        method,
        url,
        data,
        headers: {
            ...headers,
            Authorization: headers?.Authorization ? 'Bearer [REDACTED]' : undefined,
        },
    });
};

/**
 * Axios ÏùëÎãµÏùÑ Î°úÍπÖÌï©ÎãàÎã§.
 * @param response Axios ÏùëÎãµ
 * @author ÍπÄÎèôÌòÑ
 */
export const logResponse = (response: AxiosResponse) => {
    if (!isDebugMode) return;

    const { status, data, config } = response;
    debugLog('‚úÖ Response', {
        status,
        url: config.url,
        method: config.method,
        data,
    });
};

/**
 * Axios ÏóêÎü¨Î•º Î°úÍπÖÌï©ÎãàÎã§.
 * @param error Axios ÏóêÎü¨
 * @author ÍπÄÎèôÌòÑ
 */
export const logError = (error: any) => {
    if (!isDebugMode) return;

    debugLog('‚ùå Error', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        url: error.config?.url,
        method: error.config?.method,
    });
};
